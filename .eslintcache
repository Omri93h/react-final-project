[{"C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\index.js":"1","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\reportWebVitals.js":"2","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\App.js":"3","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\PageError.js":"4","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Login.js":"5","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Header.js":"6","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Dashboard.js":"7","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Nav.js":"8","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Strategies.js":"9","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Settings.js":"10","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Welcome.js":"11","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\SetStrategy.js":"12","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\ManualOrder.js":"13","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Premium.js":"14","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\PieChart.js":"15","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Loading.js":"16"},{"size":361,"mtime":1613409579117,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1612091903463,"results":"19","hashOfConfig":"18"},{"size":5326,"mtime":1613997924857,"results":"20","hashOfConfig":"18"},{"size":375,"mtime":1612957231794,"results":"21","hashOfConfig":"18"},{"size":2126,"mtime":1613409579107,"results":"22","hashOfConfig":"18"},{"size":3006,"mtime":1613997924865,"results":"23","hashOfConfig":"18"},{"size":8993,"mtime":1613997924860,"results":"24","hashOfConfig":"18"},{"size":2459,"mtime":1613997924870,"results":"25","hashOfConfig":"18"},{"size":11333,"mtime":1613997924878,"results":"26","hashOfConfig":"18"},{"size":1184,"mtime":1613997924876,"results":"27","hashOfConfig":"18"},{"size":3597,"mtime":1613997924881,"results":"28","hashOfConfig":"18"},{"size":5052,"mtime":1613997924875,"results":"29","hashOfConfig":"18"},{"size":8939,"mtime":1613997924868,"results":"30","hashOfConfig":"18"},{"size":2045,"mtime":1613997924873,"results":"31","hashOfConfig":"18"},{"size":1211,"mtime":1613997924872,"results":"32","hashOfConfig":"18"},{"size":608,"mtime":1613997924866,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"19agw5e",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\index.js",[],["73","74"],"C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\App.js",[],"C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\PageError.js",[],"C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Login.js",[],"C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Header.js",[],"C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Dashboard.js",["75"],"import PieChart from './PieChart';\r\nimport { useState, useEffect } from 'react';\r\nimport Loading from './Loading';\r\nimport btcIcon from 'cryptocurrency-icons/32/icon/btc.png'\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nconst Dashboard = ({ balance, orders, totalValue }) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function getBalance() {\r\n            const url = 'http://localhost:8080/api/portfolio/';\r\n            const response = await fetch(url, {\r\n                credentials: 'include',\r\n                withCredentials: 'true'\r\n            });\r\n            const balance = await response.json();\r\n            const data = []\r\n            for (const i in balance) {\r\n                balance[i].id === 'BTC' ?\r\n                    balance[i].amount = parseFloat(Number(balance[i].amount).toFixed(5))\r\n                    :\r\n                    balance[i].amount = parseFloat(Number(balance[i].amount).toFixed(3))\r\n\r\n                const currCoinValue = balance[i].value.toFixed(1)\r\n\r\n                data.push({\r\n                    \"id\": balance[i].id, \"label\": balance[i].id + \" (\" + balance[i].amount + \")\",\r\n                    \"amount\": balance[i].amount, \"value\": currCoinValue,\r\n                })\r\n            }\r\n            return data;\r\n        }\r\n\r\n        async function getTotalValue(balance) {\r\n            const url = 'http://localhost:8080/api/binance/getBTCUSD';\r\n            const response = await fetch(url, {\r\n                credentials: 'include',\r\n                withCredentials: 'true'\r\n            });\r\n            const btcPrice = await response.json();\r\n            const userTotalValue = { USD: 0, BTC: 0 };\r\n            for (const i in balance) {\r\n                userTotalValue.USD += Number(balance[i].value)\r\n            }\r\n            userTotalValue.USD = userTotalValue.USD.toFixed(1);\r\n            userTotalValue.BTC = (userTotalValue.USD / btcPrice).toFixed(5);\r\n            return userTotalValue;\r\n        }\r\n\r\n        async function getOrders() {\r\n            const url = 'http://localhost:8080/api/orders';\r\n            const response = await fetch(url, {\r\n                credentials: 'include',\r\n                withCredentials: 'true'\r\n            });\r\n            const userOrders = await response.json();\r\n            return userOrders;\r\n        }\r\n\r\n        async function userData() {\r\n            try {\r\n                let userCurrentBalance = balance.userBalance;\r\n                let userOrders = null;\r\n                let total = 0;\r\n                setLoading(true);\r\n                if (!balance.userBalance || refresh) {\r\n                    userCurrentBalance = await getBalance();\r\n                    balance.setUserBalance(userCurrentBalance);\r\n                    userOrders = await getOrders();\r\n                    orders.setUserOrders(userOrders);\r\n                    total = await getTotalValue(userCurrentBalance);\r\n                    totalValue.setUserTotal(total);\r\n                }\r\n                setLoading(false);\r\n            } catch (error) {\r\n                setLoading(false);\r\n                return (<div>\"ERROR LOADING\"</div>)\r\n            }\r\n        }\r\n\r\n        (async function refreshBalance() {\r\n            if (refresh) {\r\n                await userData();\r\n                setRefresh(false)\r\n            }\r\n        })()\r\n\r\n        userData();\r\n    }, [refresh]);\r\n\r\n    const positionsDataStyle = {\r\n        marginTop: \"10px\",\r\n        display: \"table\",\r\n        width: \"100%\",\r\n    }\r\n\r\n    const tableCell = {\r\n        height: \"30px\",\r\n        display: \"table-cell\",\r\n        textAlign: \"center\",\r\n        maxWidth: \"40px\",\r\n    }\r\n\r\n    const orderDataStyle = {\r\n        lineHeight: \"24px\",\r\n        fontSize: \"18px\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"page\">\r\n            <span className=\"page-header\">D A S H B O A R D</span>\r\n            <div className=\"section-row\">\r\n                <section className=\"small-section\">\r\n                    <div className=\"section-header\" style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                        <span>Currenger Balance</span>\r\n                        <IconButton style={{ width: \"18px\", marginTop: \"-3px\" }} onClick={() => setRefresh(true)}>\r\n                            <RefreshIcon style={{ width: \"18px\" }} />\r\n                        </IconButton>\r\n                    </div>\r\n                    {loading ?\r\n                        <Loading data={balance.userBalance} isLoading={loading} />\r\n                        :\r\n                        <div className=\"fade-in-fast\">\r\n                            <div style={{ margin: \"0 auto\", height: \"180px\", display: \"block\", maxWidth: \"360px\", marginTop: \"10px\" }}>\r\n                                <PieChart data={balance.userBalance} />\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </section>\r\n\r\n                <section className=\"small-section\">\r\n                    <span className=\"section-header\">Total Value</span>\r\n                    {loading || !(totalValue.userTotal.BTC) ?\r\n                        <Loading data={balance.userBalance} isLoading={loading} />\r\n                        :\r\n                        <div className=\"fade-in-fast\" style={{ textAlign: \"center\", marginTop: \"45px\" }}>\r\n                            <div style={{ fontSize: \"40px\", display: \"flex\", alignItems: \"center\", width: \"100%\", justifyContent: \"center\" }}>\r\n                                <span><b>{totalValue.userTotal.BTC}</b> </span>\r\n                                <img src={btcIcon} alt=\"btc-icon\" />\r\n                            </div>\r\n                            <span style={{ fontSize: \"25px\", fontWeight: \"lighter\" }}>\r\n                                ≈ <br />{totalValue.userTotal.USD}$\r\n                            </span>\r\n                        </div>\r\n                    }\r\n\r\n                </section>\r\n            </div>\r\n\r\n            <section className=\"big-section\">\r\n                <span className=\"section-header\">Open Orders</span>\r\n\r\n                {orders.userOrders ?\r\n\r\n                    <div className=\"fade-in-fast\" style={positionsDataStyle}>\r\n                        <div id=\"symbol\" style={tableCell}>\r\n                            <div className=\"table-cell-header\" >Symbol</div> {\r\n                                orders.userOrders.map(order => (<div style={orderDataStyle} key={order.id}> {order.symbol}</div>))}\r\n                        </div>\r\n                        <div id=\"amount\" style={tableCell}>\r\n                            <div className=\"table-cell-header\">Amount</div>\r\n                            {orders.userOrders.map(order => (<div style={orderDataStyle} key={order.id}> {parseFloat(order.origQty)}</div>))}\r\n                        </div>\r\n                        <div id=\"action\" style={tableCell}>\r\n                            <div className=\"table-cell-header\">Action</div>\r\n                            {orders.userOrders.map(order => (\r\n                                <div key={order.id} style={orderDataStyle}>\r\n                                    <span style={order.side === \"BUY\" ? { color: \"green\" } : { color: \"red\" }}>{order.side}</span>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div id=\"price\" style={tableCell} >\r\n                            <div className=\"table-cell-header\">Price</div>\r\n                            {orders.userOrders.map(order => (\r\n                                <div style={orderDataStyle} key={order.id}> {order.price}</div>))}\r\n                        </div>\r\n                        <div id=\"status\" style={tableCell}>\r\n                            <div className=\"table-cell-header\">Status</div>\r\n                            {orders.userOrders.map(order => (\r\n                                <div style={orderDataStyle} key={order.id}> {order.status}</div>\r\n                            ))}\r\n                        </div>\r\n                        <div id=\"cancel\" style={tableCell}>\r\n                            <div className=\"table-cell-header\">Cancel</div>\r\n                            {orders.userOrders.map(order => (\r\n                                <div style={orderDataStyle} key={order.id}>\r\n                                    <CancelIcon\r\n                                        style={{ height: \"20px\", color: \"red\" }}\r\n                                        variant=\"contained\"\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    \"\"}\r\n\r\n            </section>\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Nav.js",[],"C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Strategies.js",["76","77","78"],"import { Grid } from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\nimport strategies from './../data/strategies.json'\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport SetStrategy from './SetStrategy';\r\nimport Loading from './Loading';\r\nimport { Button } from \"@material-ui/core\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AssignmentLateIcon from '@material-ui/icons/AssignmentLate';\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\n\r\nasync function deleteActiveStrategy(strategy_id) {\r\n    await fetch(`http://localhost:8080/api/strategy/${strategy_id}`, {\r\n        method: \"DELETE\",\r\n        credentials: 'include',\r\n        withCredentials: 'true'\r\n    })\r\n}\r\n\r\nasync function editActiveStrategy(strategy_id) {\r\n    await fetch(`http://localhost:8080/api/strategy/${strategy_id}`, {\r\n        method: \"PUT\",\r\n        credentials: 'include',\r\n        withCredentials: 'true'\r\n    })\r\n}\r\n\r\nasync function getActiveStrategies(setLoading, setActiveStrategies) {\r\n    let res = await fetch('http://localhost:8080/api/strategy', {\r\n        credentials: 'include',\r\n        withCredentials: 'true'\r\n    })\r\n    res = await res.json();\r\n    setActiveStrategies(res);\r\n    setLoading(false)\r\n}\r\n\r\nconst Strategies = ({ userData }) => {\r\n    const [activeStrategies, setActiveStrategies] = useState(undefined);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [isPremiumPopup, setPremiumPopup] = useState(false);\r\n    const [isDetDeleteVerifyPopup, setDeleteVerifyPopup] = useState(false);\r\n    const [strategyToDelete, setStrategyToDelete] = useState(null);\r\n\r\n    const closeModal = () => {\r\n        setPremiumPopup(false);\r\n        setDeleteVerifyPopup(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        setActiveStrategies(undefined);\r\n        getActiveStrategies(setLoading, setActiveStrategies);\r\n    }, []);\r\n\r\n    const StrategyPage = [];\r\n    strategies.forEach((strategy) => (\r\n        StrategyPage.push(strategy.name.replaceAll(\" \", \"_\"))\r\n    ));\r\n\r\n    function handleDeleteVerifyPopup(strategy_id) {\r\n        setDeleteVerifyPopup(!isDetDeleteVerifyPopup);\r\n        setStrategyToDelete(strategy_id);\r\n    }\r\n\r\n    function handleDelete(strategy_id) {\r\n        deleteActiveStrategy(strategy_id);\r\n        setActiveStrategies(activeStrategies.filter(i => i.strategy_id !== strategy_id))\r\n    }\r\n\r\n    function handleEdit(strategy_id) {\r\n        console.log(strategy_id);\r\n    }\r\n\r\n    function handlePremiumPopup(isPremiumStrategy, isPremiumUser) {\r\n        if (isPremiumStrategy && !isPremiumUser) {\r\n            setPremiumPopup(!isPremiumPopup)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const deleteIconStyle = { position: \"absolute\", right: \"0\", zIndex: \"1\" };\r\n    const editIconStyle = { position: \"absolute\", left: \"0\", zIndex: \"1\" };\r\n\r\n    const cardContentStyle = {\r\n        marginTop: \"40px\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        fontSize: \"14px\"\r\n    }\r\n\r\n    const strategiesPage = () => {\r\n        return (\r\n            <div className=\"page\">\r\n                <span className=\"page-header\">S T R A T E G I E S</span>\r\n                <section className=\"big-section\" id=\"active-strategies\">\r\n                    <span className=\"section-header\">My Strategies</span>\r\n                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n                        <Grid container item xs={12} spacing={3}>\r\n                            {loading ?\r\n                                <Loading activeStrategies={activeStrategies} isLoading={loading} />\r\n                                :\r\n                                activeStrategies.map((activeStrategy) => (\r\n                                    <div className=\"active-strategy\" key={activeStrategy.strategy_id}>\r\n                                        <IconButton aria-label=\"delete\" onClick={() =>\r\n                                            handleDeleteVerifyPopup(activeStrategy.strategy_id)}\r\n                                            style={deleteIconStyle}>\r\n                                            <DeleteIcon />\r\n                                        </IconButton>\r\n\r\n                                        <Popup modal\r\n                                            trigger={<IconButton\r\n                                                aria-label=\"edit\"\r\n                                                onClick={() => handleEdit(activeStrategy.strategy_id)}\r\n                                                style={editIconStyle}>\r\n                                                <EditIcon />\r\n                                            </IconButton>}>\r\n                                            <form style={{ fontFamily: 'ubuntu' }}>\r\n                                                <label>Profit </label>\r\n                                                <input type=\"number\" name=\"take_profit\" /> <br />\r\n                                                <label>stop loss </label>\r\n                                                <input type=\"number\" name=\"stop_loss\" /> <br />\r\n                                                <input type=\"submit\" value=\"submit\" />\r\n                                            </form>\r\n                                        </Popup>\r\n\r\n                                        <div className=\"card-header\"> {activeStrategy.currency}</div>\r\n                                        <div className=\"card-content\"\r\n                                            style={cardContentStyle}>\r\n                                            <div style={{ fontSize: \"13px\" }}>\r\n                                                {\r\n                                                    activeStrategy.status === \"waiting_to_buy\" ?\r\n                                                        <span style={{ color: \"green\" }}>Waiting To <b>BUY</b></span> :\r\n                                                        <span style={{ color: \"red\" }}>Waiting To <b>SELL</b></span>\r\n                                                }\r\n                                            </div><br /><br />\r\n                                            <span style={{ fontFamily: \"monospace\", fontSize: \"22px\" }}> {activeStrategy.strategy_type}</span>\r\n                                            <br /><br />\r\n                                            <span>Amount:  <b>{activeStrategy.amount + \" \" +\r\n                                                activeStrategy.currency.slice(0, -3)} </b></span>\r\n                                            <span>Expected Profit:  <b>{activeStrategy.take_profit}%</b></span>\r\n                                            <span>Stop Loss at:  <b>{activeStrategy.stop_loss}%</b></span>\r\n                                        </div>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                    <div id=\"active-strategies-container\"></div>\r\n                </section>\r\n\r\n                <section className=\"big-section\">\r\n                    <div className=\"section-header\">Add Strategy</div>\r\n                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n                        <Grid container item xs={12} spacing={3}>\r\n                            {strategies.map((strategy) => (\r\n                                <Link\r\n                                    key={strategy.id}\r\n                                    to={\r\n                                        strategy.isPremium && !userData.is_premium ?\r\n                                            '/Strategies'\r\n                                            :\r\n                                            `Strategies/${StrategyPage[strategy.id]}`}\r\n                                >\r\n                                    <div className=\"card\" key={strategy.id}\r\n                                        onClick={() => handlePremiumPopup(strategy.isPremium, userData.is_premium)}>\r\n                                        <div className=\"card-header\">{strategy.name}</div>\r\n                                        <img className=\"card-image\" src={strategy.img} alt={strategy.name} />\r\n                                    </div>\r\n                                </Link>\r\n                            ))\r\n                            }\r\n                            <Popup open={isPremiumPopup} onClose={closeModal}>\r\n                                <div className=\"modal\">\r\n                                    <a className=\"close\" onClick={closeModal}>&times;</a> <br />\r\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Beatae magni\r\n                                    omnis delectus nemo, maxime molestiae dolorem numquam mollitia, voluptate\r\n                                    ea, accusamus excepturi deleniti ratione sapiente! Laudantium, aperiam\r\n                                    doloribus. Odit, aut.\r\n                            </div>\r\n                            </Popup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </section>\r\n\r\n                <Popup open={isDetDeleteVerifyPopup} closeOnDocumentClick onClose={closeModal}>\r\n                    <div className=\"modal\">\r\n                        <a className=\"close\" onClick={closeModal}>&times;</a>\r\n                        <AssignmentLateIcon style={{ fontSize: 80, color: \"orange\" }} /><br />\r\n                        <span style={{ color: \"#888\" }}>\r\n                            Delete this strategy?\r\n                            </span>\r\n                        <br />\r\n                        <div style={{ margin: \"50px 0px 20px 0px\", display: \"flex\", justifyContent: \"space-around\" }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{ background: \"green\", color: \"white\" }}\r\n                                onClick={() => {\r\n                                    handleDelete(strategyToDelete)\r\n                                    setDeleteVerifyPopup(false)\r\n                                }}>\r\n                                Yes, Delete it\r\n                        </Button>\r\n                        &nbsp;\r\n                        <Button \r\n                        variant=\"contained\"\r\n                        style={{ background: \"red\", color: \"white\" }}\r\n                         onClick={() =>\r\n                                setDeleteVerifyPopup(false)\r\n                            }>\r\n                                No\r\n                        </Button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </Popup>\r\n\r\n            </div >\r\n\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                {StrategyPage.map(pageName =>\r\n                    <Route path={(\"/strategies/\" + pageName)} component={SetStrategy} key=\"setStrategy\" />)\r\n                }\r\n                <Route path=\"/strategies\" component={strategiesPage} key=\"strategies\" />\r\n            </Switch>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Strategies\r\n","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Settings.js",["79","80"],"import React from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { Button } from \"@material-ui/core\";\r\nimport StarIcon from '@material-ui/icons/Star';\r\n\r\n\r\nconst Settings = () => {\r\n    const { control, handleSubmit } = useForm();\r\n    //Handling Submit\r\n    const onSubmit = data => {\r\n        console.log(data);\r\n    }\r\n\r\n    const inputBinanceKey = (\r\n        <form form onSubmit={handleSubmit(onSubmit)} style={{ margin: \"20px auto\" }}>\r\n            <Controller as=\"input\" defaultValue=\"\" control={control} type=\"text\" name=\"binance_key\" placeholder=\"Insert Api Key ...\" /><br />\r\n            <Controller as=\"input\" defaultValue=\"\" control={control} type=\"text\" name=\"binance_private\" placeholder=\"Insert Api Secret ...\" /><br />\r\n            <br />\r\n            <input type=\"submit\" />\r\n        </form>\r\n    )\r\n    return (\r\n        <div className=\"page\">\r\n            <span className=\"page-header\">S E T T I N G S</span>\r\n            <section className=\"big-section\">\r\n                <span className=\"section-header\">Configure API</span>\r\n                {inputBinanceKey}\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings\r\n","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Welcome.js",["81","82"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst Welcome = (props) => {\r\n    const video = process.env.PUBLIC_URL + '/vid/video2.mp4';\r\n\r\n    const routeChange = () => {\r\n        window.location.assign('http://localhost:8080/auth/google');\r\n    }\r\n\r\n\r\n    const centerDivStyle = {\r\n        position: \"relative\",\r\n        color: \"#aaa\",\r\n        lineHeight: \"50px\",\r\n        padding: \"100px 0 75px 0\",\r\n        width: \"100%\",\r\n    }\r\n\r\n    const welcomePageH1 = {\r\n        fontSize: \"48px\",\r\n        position: \"absolute\",\r\n        width: \"100%\",\r\n\r\n    }\r\n\r\n    const welcomePageParagraph = {\r\n        display: \"block\",\r\n        fontSize: \"24px\",\r\n        width: \"fit-content\",\r\n    }\r\n\r\n    const entryButtonStyle = {\r\n        background: \"#1c316d\",\r\n        color: \"white\",\r\n        opacity: \"0.8\",\r\n        fontWeight: \"bold\",\r\n        padding: \"10px\",\r\n        position: \"absolute\",\r\n        height: \"50px\",\r\n        right: \"30px\",\r\n        top: \"5px\",\r\n        zIndex:\"100\"\r\n    }\r\n\r\n    const contentStyle = { background: 'white', borderRadius: \"10px\", width: \"300px\", border: \"0\", opacity: \".9\" };\r\n    const overlayStyle = { background: 'rgba(0,0,0,0.75)' };\r\n\r\n    return (\r\n        <div className=\"page\">\r\n            <div className=\"videoContainer\">\r\n                <video src={video} alt=\"currenger video\" autoPlay loop muted>\r\n                    (Your browser does not support the video tag)\r\n                </video>\r\n\r\n            </div>\r\n            <div className=\"wrapper\">\r\n                <div className=\"fade-in-fast\">\r\n                    <Button onClick={routeChange} size=\"large\" variant=\"contained\" style={entryButtonStyle}>\r\n                        <pre style={{ fontSize: \"16px\" }}><p style={{ fontSize: \"12px\" }}>Login / Register with</p>\r\n                                GOOGLE</pre>\r\n                    </Button>\r\n                </div>\r\n                <div style={centerDivStyle}>\r\n                    <h1 style={welcomePageH1} className=\"slide-up\">Auto Crypto Trading & Analysis</h1><br />\r\n                    <pre style={welcomePageParagraph} className=\"fade-in-slow\">\r\n                        Manage your cryptocurrency portfolio easily\r\n                    </pre>\r\n\r\n                    {/* \r\n                        {/* <Button onClick={() => (<Redirect to=\"/login\" />)} size=\"large\" variant=\"contained\" style={{ background: \"#1c316d\", color: \"white\", opacity: \"0.8\" }}>\r\n                            New LOGIN\r\n                        </Button>\r\n\r\n                        <Popup trigger={loginButton} modal closeOnDocumentClick {...{ contentStyle, overlayStyle }}>\r\n                            <Login auth={props.auth} user={props.user} />\r\n                        </Popup>\r\n                        <Popup trigger={signUpButton} modal closeOnDocumentClick {...{ contentStyle, overlayStyle }}>\r\n\r\n                            <SignUp />\r\n                        </Popup> */}\r\n\r\n                    {/* </div> */}\r\n                </div>\r\n            </div>\r\n            <style type=\"text/css\">\r\n                {` header {\r\n                                position:absolute;\r\n                                background-color: transparent;\r\n                                transition:0.2s all ease;\r\n                                box-shadow: 0px 0px 1px white\r\n                            } \r\n                            header .user-side {\r\n                                display:none\r\n                            }\r\n                        `}\r\n            </style>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Welcome\r\n","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\SetStrategy.js",["83","84"],"import React, { useState } from 'react';\r\nimport Select from 'react-select';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport strategies from './../data/strategies.json'\r\nimport NumericInput from 'react-numeric-input';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { Button } from \"@material-ui/core\";\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\r\n\r\nconst symbols = [\r\n    { value: 'DOGEBTC', label: 'DOGE/BTC' },\r\n    { value: 'ETHBTC', label: 'ETH/BTC' },\r\n    { value: 'LTCBTC', label: 'LTC/BTC' },\r\n    { value: 'BNBBTC', label: 'BNB/BTC' },\r\n    { value: 'XRPBTC', label: 'XRP/BTC' },\r\n    { value: 'ADABTC', label: 'ADA/BTC' }\r\n];\r\n\r\nasync function addStrategy(data) {\r\n    await fetch('http://localhost:8080/api/strategy/', {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }).then(response => console.log(response));\r\n}\r\n\r\n\r\nconst SetStrategy = ({ match }) => {\r\n    const [isPopupOpen, setOpen] = useState(false);\r\n    const closeModal = () => setOpen(false);\r\n\r\n    const [selected, setSelected] = useState();\r\n    const { control, handleSubmit } = useForm();\r\n    const onSubmit = async (data) => {\r\n        data.strategy_type = match.params.strategyName.replaceAll(\"_\", \" \");\r\n        data.currency = data.currency.value;\r\n        await addStrategy(data);\r\n        handleSubmitPopup();\r\n    }\r\n\r\n    function handleSubmitPopup() {\r\n        setOpen(!isPopupOpen);\r\n        console.log(\"pop up?\")\r\n    }\r\n\r\n\r\n\r\n    function chooseSelected(opt) {\r\n        setSelected(opt);\r\n    }\r\n\r\n\r\n    function percentFormat(num) {\r\n        return num + '%'\r\n    }\r\n\r\n    function amountFormat(num) {\r\n        if (!selected) {\r\n            return \"0\"\r\n        }\r\n        const currency = selected.label.slice(0, -4);\r\n        return (num + \" \" + currency);\r\n    }\r\n\r\n    return (\r\n        <div className=\"page\">\r\n            <div className=\"page-header\">S T R A T E G I E S → {match.params.strategyName.replaceAll(\"_\", \" \")}</div>\r\n            <section className=\"big-section\" style={{ width: \"50%\", margin: \"0 auto\" }}>\r\n                <span className=\"section-header\">Strategy Configuration</span>\r\n                <div className=\"wrapper\" style={{ textAlign: \"center\" }} >\r\n                    <form onSubmit={handleSubmit(onSubmit)} style={{ margin: \"20px auto\" }}>\r\n                        <Controller\r\n                            name=\"currency\"\r\n                            control={control}\r\n                            defaultValue={symbols[0]}\r\n                            render={({ onChange }) => (\r\n                                <Select\r\n                                    options={symbols}\r\n                                    placeholder=\"Choose coin ...\"\r\n                                    isSearchable\r\n                                    onChange={e => {\r\n                                        onChange(e)\r\n                                        chooseSelected(e)\r\n                                    }}\r\n\r\n                                />)}\r\n                        />\r\n                        <br /><br />\r\n                        <label>Amount:</label><br />\r\n                        <Controller as={NumericInput} name=\"amount\" defaultValue={0} control={control} min={1} max={9999999} step={1}\r\n                            placeholder=\"Amount ...\" format={amountFormat} /> <br /><br />\r\n                        <label >Profit target:</label><br />\r\n                        <Controller as={NumericInput} name=\"take_profit\" defaultValue={0} control={control} min={3} max={10} step={1}\r\n                            placeholder=\"Profit target  ...\" format={percentFormat} /> <br /><br />\r\n                        <label>Stop loss:</label><br />\r\n                        <Controller as={NumericInput} name=\"stop_loss\" defaultValue={0} control={control} min={3} max={10} step={1}\r\n                            placeholder=\"Stoploss  ...\" format={percentFormat} /> <br /><br />\r\n                        <Button type=\"submit\" variant=\"contained\" size=\"large\"\r\n                            style={{ background: \"#1c316d\", color: \"white\" }}\r\n                            startIcon={<AddIcon />}>\r\n                            Add Strategy\r\n                         </Button>\r\n                    </form>\r\n                    <Popup open={isPopupOpen} closeOnDocumentClick onClose={closeModal}>\r\n                        <div className=\"modal\">\r\n                            <a className=\"close\" onClick={closeModal}>&times;</a>\r\n                            <AssignmentTurnedInIcon style={{ fontSize: 80, color: \"green\" }} /><br />\r\n                                    New strategy added successfully !\r\n                            </div>\r\n                    </Popup>\r\n                </div>\r\n            </section>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default SetStrategy\r\n","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\ManualOrder.js",["85"],"import React, { useState } from 'react';\r\nimport Select from 'react-select';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport NumericInput from 'react-numeric-input';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Button from '@material-ui/core/Button';\r\nimport { render } from '@testing-library/react';\r\n\r\nconst symbols = [\r\n    { value: 'DOGEBTC', label: 'DOGE/BTC' },\r\n    { value: 'ETHBTC', label: 'ETH/BTC' },\r\n    { value: 'LTCBTC', label: 'LTC/BTC' },\r\n    { value: 'BNBBTC', label: 'BNB/BTC' },\r\n    { value: 'XRPBTC', label: 'XRP/BTC' },\r\n    { value: 'ADABTC', label: 'ADA/BTC' }\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n});\r\n\r\nconst ManualOrder = ({ match }) => {\r\n    const [selected, setSelected] = useState(undefined);    // symbol\r\n    const [amount, setAmount] = useState(0);                // amount\r\n    const [currencyPrice, setCurrencyPrice] = useState(0);  // price\r\n    const [actionType, setActionType] = useState(\"\");       // buy/sell\r\n    const [orderType, setOrderType] = useState(\"market\");   // market/limit\r\n    const { control, handleSubmit } = useForm();            //form\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleOrderTypeChange = (event, currentOrderType) => {\r\n        setOrderType(currentOrderType);\r\n    };\r\n\r\n    const onSubmit = async (data) => {\r\n        data.symbol = data.symbol.value;\r\n        data.action_type = actionType;\r\n        data.price = data.price.toFixed(8);\r\n        orderType === \"market\" ?\r\n            await addMarketOrder(data) :\r\n            await addLimitOrder(data);\r\n    }\r\n\r\n    async function showPrice(selected) {\r\n        const url = `http://localhost:8080/api/binance/getPriceForSymbol/${selected}`;\r\n        const response = await fetch(url, {\r\n            credentials: 'include',\r\n            withCredentials: 'true',\r\n        })\r\n        const commits = await response.json();\r\n        setCurrencyPrice(commits.bidPrice);\r\n    }\r\n\r\n    async function addMarketOrder(data) {\r\n        await fetch('http://localhost:8080/api/binance/marketOrder/', {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n    }\r\n    async function addLimitOrder(data) {\r\n        await fetch('http://localhost:8080/api/binance/limitOrder/', {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n    }\r\n\r\n    function chooseSelected(opt) {\r\n        setSelected(opt);\r\n    }\r\n\r\n    function amountFormat(amount) {\r\n        if (!selected) {\r\n            return amount + \"\"\r\n        }\r\n        const currency = selected.label.slice(0, -4);\r\n        return amount + \" \" + currency;\r\n    }\r\n\r\n    function floatFormat(price) {\r\n        return price;\r\n    }\r\n    return (\r\n        <div className=\"page\">\r\n            <span className=\"page-header\" >M A N U A L &nbsp; O R D E R</span>\r\n\r\n            <section className=\"big-section\" style={{ margin: \"0 auto\" }}>\r\n                <Paper className={classes.root}>\r\n                    <Tabs\r\n                        value={orderType}\r\n                        variant='fullWidth'\r\n                        onChange={handleOrderTypeChange}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        centered\r\n                    >\r\n                        <Tab label=\"MARKET\" value=\"market\" />\r\n                        <Tab label=\"LIMIT\" value=\"limit\" />\r\n                    </Tabs>\r\n                </Paper>\r\n\r\n                <div className=\"wrapper\" style={{ textAlign: \"center\", width: \"50%\" }} >\r\n\r\n                    <form onSubmit={handleSubmit(onSubmit)} style={{ margin: \"20px auto\" }}>\r\n                        <Controller\r\n                            name=\"symbol\"\r\n                            control={control}\r\n                            defaultValue={symbols[0]}\r\n                            render={({ onChange }) => (\r\n                                <Select\r\n                                    options={symbols}\r\n                                    placeholder=\"Choose coin ...\"\r\n                                    isSearchable\r\n                                    onChange={e => {\r\n                                        onChange(e)\r\n                                        chooseSelected(e)\r\n                                        showPrice(e.value)\r\n                                    }}\r\n                                />)}\r\n                        />\r\n                        <label style={{ display: \"block\", marginTop: \"20px\" }}>\r\n                            {selected ? `Current Price: ` : ``}\r\n                        </label>\r\n                        <span>\r\n                            {selected ?\r\n                                `1 ${selected.label.slice(0, selected.label.indexOf('/'))} = `\r\n                                + currencyPrice + ' BTC' :\r\n                                ``}\r\n                        </span>\r\n                        <br /><br />\r\n\r\n                        <label>Amount:</label>\r\n                        <Controller\r\n                            name=\"quantity\"\r\n                            control={control}\r\n                            defaultValue={\"0.0\"}\r\n                            render={({ onChange }) => (\r\n                                <NumericInput\r\n                                    min={0.1}\r\n                                    max={9999999}\r\n                                    step={0.1}\r\n                                    placeholder=\"0.0\"\r\n                                    onChange={e => {\r\n                                        onChange(e)\r\n                                        setAmount(e)\r\n                                    }}\r\n                                    format={amountFormat}\r\n                                />\r\n                            )\r\n                            }\r\n                        />\r\n\r\n                        <br /><br />\r\n\r\n                        <div>\r\n                            <label>Price:</label>\r\n                            <Controller\r\n                                name=\"price\"\r\n                                control={control}\r\n                                defaultValue=\"Market Price\"\r\n                                render={({ onChange }) => (\r\n                                    <NumericInput\r\n                                        disabled={orderType === \"market\" ? true : false}\r\n                                        min={0.00000001}\r\n                                        max={1000}\r\n                                        step={0.00000001}\r\n                                        precision={8}\r\n                                        onChange={e => {\r\n                                            onChange(e)\r\n                                        }}\r\n                                        format={floatFormat}\r\n                                        defaultValue={currencyPrice}\r\n                                        placeholder={orderType === \"market\" ? \"MARKET PRICE\" : \"0.00000001\"}\r\n                                    />\r\n                                )\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n\r\n\r\n\r\n\r\n                        <br /><br />\r\n\r\n                        <label><b>Total Price: </b></label><br />\r\n\r\n                        <span>{parseFloat(Number(amount)) * parseFloat(Number(currencyPrice))} BTC</span>\r\n\r\n                        <div style={{ display: \"flex\", justifyContent: \"space-evenly\", marginTop: \"50px\" }}>\r\n                            <Button onClick={() => setActionType(\"buy\")} type=\"submit\" name=\"buy\" variant=\"contained\" size=\"large\" style={{ background: \"green\", color: \"white\", width: \"100px\" }} >\r\n                                BUY !\r\n                                </Button>\r\n                            <Button onClick={() => setActionType(\"sell\")} type=\"submit\" name=\"sell\" variant=\"contained\" size=\"large\" style={{ background: \"red\", color: \"white\", width: \"100px\" }} >\r\n                                SELL !\r\n                                </Button>\r\n                        </div>\r\n\r\n                    </form>\r\n                </div>\r\n            </section>\r\n            {/* <section className=\"small-section\" style={{ margin: \"0 auto\", height: \"400px\" }}>\r\n                    <span className=\"section-header\" style={{ color: \"#444\" }} >Market <b>SELL</b> Order</span>\r\n                </section> */}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManualOrder\r\n","C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Premium.js",[],"C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\PieChart.js",[],"C:\\Users\\Admin\\Documents\\GitHub\\react-final-project\\src\\components\\Loading.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":93,"column":8,"nodeType":"92","endLine":93,"endColumn":17,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":23,"column":16,"nodeType":"96","messageId":"97","endLine":23,"endColumn":34},{"ruleId":"98","severity":1,"message":"99","line":181,"column":37,"nodeType":"100","endLine":181,"endColumn":79},{"ruleId":"98","severity":1,"message":"99","line":194,"column":25,"nodeType":"100","endLine":194,"endColumn":67},{"ruleId":"94","severity":1,"message":"101","line":3,"column":10,"nodeType":"96","messageId":"97","endLine":3,"endColumn":16},{"ruleId":"94","severity":1,"message":"102","line":4,"column":8,"nodeType":"96","messageId":"97","endLine":4,"endColumn":16},{"ruleId":"94","severity":1,"message":"103","line":47,"column":11,"nodeType":"96","messageId":"97","endLine":47,"endColumn":23},{"ruleId":"94","severity":1,"message":"104","line":48,"column":11,"nodeType":"96","messageId":"97","endLine":48,"endColumn":23},{"ruleId":"94","severity":1,"message":"105","line":4,"column":8,"nodeType":"96","messageId":"97","endLine":4,"endColumn":18},{"ruleId":"98","severity":1,"message":"99","line":111,"column":29,"nodeType":"100","endLine":111,"endColumn":71},{"ruleId":"94","severity":1,"message":"106","line":10,"column":10,"nodeType":"96","messageId":"97","endLine":10,"endColumn":16},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'balance', 'orders', and 'totalValue'. Either include them or remove the dependency array.","ArrayExpression",["109"],"no-unused-vars","'editActiveStrategy' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Button' is defined but never used.","'StarIcon' is defined but never used.","'contentStyle' is assigned a value but never used.","'overlayStyle' is assigned a value but never used.","'strategies' is defined but never used.","'render' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},"Update the dependencies array to be: [balance, orders, refresh, totalValue]",{"range":"112","text":"113"},[3567,3576],"[balance, orders, refresh, totalValue]"]